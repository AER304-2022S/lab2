# -*- coding: utf-8 -*-
"""Beam.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bVBQnNWuy1VkcJ-NGdhJimiSZTWlwAax
"""

# Commented out IPython magic to ensure Python compatibility.
# #@title Install Topology Optimization Library
# #@markdown Source: https://github.com/zfergus/topopt
# %%capture
# !git clone https://github.com/zfergus/topopt.git
# !pip install nlopt
# !pip install cvxopt
# %cd topopt
# !python setup.py install

import numpy as np
from topopt.boundary_conditions import MBBBeamBoundaryConditions
from topopt.problems import ComplianceProblem
from topopt.solvers import TopOptSolver
from topopt.filters import DensityBasedFilter
from topopt.guis import GUI

nelx, nely = 160, 50  # Number of elements in the x and y directions
volfrac = 0.249  # Volume fraction for constraints
penal = 3.0  # Penalty for SIMP
rmin = 5  # Filter radius

# Initial solution
x = volfrac * np.ones(nely * nelx, dtype=float)

# Boundary conditions defining the loads and fixed points
bc = MBBBeamBoundaryConditions(nelx, nely)

# Problem to optimize given objective and constraints
problem = ComplianceProblem(bc, penal)
gui = GUI(problem, "Topology Optimization Example")
topopt_filter = DensityBasedFilter(nelx, nely, rmin)
solver = TopOptSolver(problem, volfrac, topopt_filter, gui)
x_opt = solver.optimize(x)

#@title Export Results
import numpy as np
from matplotlib import pyplot as plt
soln = x_opt.reshape((nelx, nely)).T
np.savetxt("beam.txt", soln) # Save optimal geometry
plt.matshow(soln)
plt.title("3-Point Loading: Minimum Compliance Topology Optimization")
plt.gca().xaxis.set_ticks_position('bottom')
plt.xlabel("2x (mm)")
plt.ylabel("2y (mm)")
plt.grid()
plt.savefig("Optimal.pdf", dpi=600, bbox_inches='tight')